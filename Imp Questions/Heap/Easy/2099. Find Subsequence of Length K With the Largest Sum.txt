class Solution {
public:


// My approach+ code but a little bit help from "codeThoughts" sir
// TC => O(nlogn)
// SC => O(n) 
    vector<int> maxSubsequence(vector<int>& nums, int k) {
     // 3 ,1 , 2, 4 , k=3, output=8
     // 0  1   3  3
     // prioirty queue
     // minheap for value {value,index} // sorted based on value
     // minheap for index (index,value) // sorted based on index

     // nums clear
     // nums.push(minheapki second value)





int n=nums.size();

priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int, int>>> minHeapforValue; // store value and it's index
priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int, int>>> minHeapforIndex;

// nlogn
for(int i=0; i<n ;i++){
    
    minHeapforValue.push({nums[i],i});
    if(minHeapforValue.size() > k)
         minHeapforValue.pop();
    
}

// nlogn
while(!minHeapforValue.empty()){
     auto top=minHeapforValue.top();
    minHeapforIndex.push({top.second,top.first});
    minHeapforValue.pop();
}
nums.clear();

// nlogn
while(!minHeapforIndex.empty()){
    auto top=minHeapforIndex.top();
    nums.push_back(top.second);
    minHeapforIndex.pop();
}

return nums;



    }
};