//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends


class Solution {
  public:
   

bool bfstopologicalSort(unordered_map<int,vector<int>> &adj,int & V){
    vector<int> indegree(V,0); // size is V, intializes all it with 0
    queue<int> q;
    
    // step1 , get indegree of all the edges
    for(int i=0; i< V;i++){
    for(auto & val:adj[i]){
        indegree[val]++;
        
    }
    
    }
    
    // step2: push into queue which vertex has indegree 0.
    
    for(int i=0; i< V;i++){
        if(indegree[i]==0)
           q.push(i);
    }
    
    // now topological sort porcess
    
    while(!q.empty()){
        
        int temp=q.front();
             q.pop();
             
             for(auto & val: adj[temp]){
                 
                 indegree[val]--;
                 
                 if(indegree[val]==0)
                    q.push(val);
             }
        
    }
    
    
    for(int i=0;i<V;i++){
        if(indegree[i] > 0)
           return true;
    }
    
    
    
    return false; // no cycle
    
    
}
bool isCyclic(int V, vector<vector<int>> adj) {
   unordered_map<int,vector<int>> adj1;
   for(auto & val: adj){
       int u=val[0];
       int v=val[1];
       
       adj1[u].push_back(v);
   }
   
   
   
   
    return  bfstopologicalSort(adj1,V);
    
}
};






//{ Driver Code Starts.

int main() {
    int tc;
    cin >> tc;
    cin.ignore();
    while (tc--) {
        int V, E;
        cin >> V >> E;
        cin.ignore();
        vector<vector<int>> edges;
        for (int i = 1; i <= E; i++) {
            int u, v;
            cin >> u >> v;
            edges.push_back({u, v});
        }

        Solution obj;
        bool ans = obj.isCyclic(V, edges);
        if (ans)
            cout << "true\n";
        else
            cout << "false\n";
    }
    return 0;
}
// } Driver Code Ends