
class Solution {
public:
    // Function to detect cycle in a directed graph.
    bool DFS_cycle(vector<vector<int>>& adj, int src, vector<bool>& visited, vector<bool> inR)
    {

        // code done by me (inshal)
        visited[src] = true;
        inR[src] = true;
        for (auto& v : adj[src]) { // src is u
 
            if (inR[v])
                return true;
            if (!visited[v])
                if (DFS_cycle(adj, v, visited, inR))
                    return true;

        }




        return false;
    }

    bool isCyclic(int V, vector<vector<int>> adj) {
        // code here

        vector<bool> visited(V, false);

        vector<bool> inRecursion(V, false);
               for (int i = 0; i < V;i++)
        {
            if (!visited[i] && DFS_cycle(adj, i, visited, inRecursion))
                return true;
        }

        return false;
    }
};
