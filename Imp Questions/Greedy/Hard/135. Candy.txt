class Solution {
public:
    // int candy(vector<int>& ratings) { // code done by me
    //     // ratings n childreb size
    //     // atleast one candy to children

    //     // Tc => O(n)
    //     // SC=> O(n)
    //     // Approach # 1, sir mik
    //     int size=ratings.size();
    //     vector<int> L2R(size,1);
    //     vector<int> R2L(size,1);

    //     // L to R
    //     for(int i=0; i< size; i++){
    //        if(i-1>=0 && ratings[i] > ratings[i-1])
    //          L2R[i]+=L2R[i-1];
    //     }
          
    //     // L to R
    //     for(int i=size-1; i>=0; i--){
    //        if(i+1<size && ratings[i] > ratings[i+1])
    //          R2L[i]+=R2L[i+1];
    //     }


    //     // final computation
    //     int miniumCandies=0;
    //     for(int i=0; i< size;i++){
    //          miniumCandies+=max(L2R[i],R2L[i]);
    //     }

        

    //     return miniumCandies;
    // }


 // sir mik code plus use only one extra array

//   int candy(vector<int>& ratings) { // code done by me
//         // ratings n childreb size
//         // atleast one candy to children

//         // Tc => O(n)
//         // SC=> O(n)
//         // Approach # 1, sir mik
//         int size=ratings.size();
//         vector<int> L2R(size,1);
//         vector<int> R2L(size,1);

//         // L to R
//         for(int i=0; i< size; i++){
//            if(i-1>=0 && ratings[i] > ratings[i-1])
//              L2R[i]=max(L2R[i],L2R[i-1]+1);
//         }
          
//         // L to R
//         for(int i=size-1; i>=0; i--){
//            if(i+1<size && ratings[i] > ratings[i+1])
//              R2L[i]=max(R2L[i],R2L[i+1]+1);
//         }


//         // final computation
//         int miniumCandies=0;
//         for(int i=0; i< size;i++){
//              miniumCandies+=max(L2R[i],R2L[i]);
//         }

        

//         return miniumCandies;
//     }


// now use of only one array

 int candy(vector<int>& ratings) { // code done by me
        // ratings n childreb size
        // atleast one candy to children

        // Tc => O(n)
        // SC=> O(n)
        // Approach # 1, sir mik
        int size=ratings.size();
        vector<int> count(size,1);

        // L to R
        for(int i=0; i< size; i++){
           if(i-1>=0 && ratings[i] > ratings[i-1])
             count[i]=max(count[i],count[i-1]+1);
        }
          
        // L to R
        for(int i=size-1; i>=0; i--){
           if(i+1<size && ratings[i] > ratings[i+1])
                count[i]=max(count[i],count[i+1]+1);
        }


        // final computation
        int miniumCandies=0;
        for(int i=0; i< size;i++){
             miniumCandies+=count[i];
        }

        

        return miniumCandies;
    }
    // Approach 2 soon will come

};