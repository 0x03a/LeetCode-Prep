
class Solution {
public:
    // int candy(vector<int>& ratings) { // code done by me
    //     // ratings n childreb size
    //     // atleast one candy to children

    //     // Tc => O(n)
    //     // SC=> O(n)
    //     // Approach # 1, sir mik
    //     int size=ratings.size();
    //     vector<int> L2R(size,1);
    //     vector<int> R2L(size,1);

    //     // L to R
    //     for(int i=0; i< size; i++){
    //        if(i-1>=0 && ratings[i] > ratings[i-1])
    //          L2R[i]+=L2R[i-1];
    //     }
          
    //     // L to R
    //     for(int i=size-1; i>=0; i--){
    //        if(i+1<size && ratings[i] > ratings[i+1])
    //          R2L[i]+=R2L[i+1];
    //     }


    //     // final computation
    //     int miniumCandies=0;
    //     for(int i=0; i< size;i++){
    //          miniumCandies+=max(L2R[i],R2L[i]);
    //     }

        

    //     return miniumCandies;
    // }


 // sir mik code plus use only one extra array

//   int candy(vector<int>& ratings) { // code done by me
//         // ratings n childreb size
//         // atleast one candy to children

//         // Tc => O(n)
//         // SC=> O(n)
//         // Approach # 1, sir mik
//         int size=ratings.size();
//         vector<int> L2R(size,1);
//         vector<int> R2L(size,1);

//         // L to R
//         for(int i=0; i< size; i++){
//            if(i-1>=0 && ratings[i] > ratings[i-1])
//              L2R[i]=max(L2R[i],L2R[i-1]+1);
//         }
          
//         // L to R
//         for(int i=size-1; i>=0; i--){
//            if(i+1<size && ratings[i] > ratings[i+1])
//              R2L[i]=max(R2L[i],R2L[i+1]+1);
//         }


//         // final computation
//         int miniumCandies=0;
//         for(int i=0; i< size;i++){
//              miniumCandies+=max(L2R[i],R2L[i]);
//         }

        

//         return miniumCandies;
//     }


// now use of only one array

//  int candy(vector<int>& ratings) { // code done by me
//         // ratings n childreb size
//         // atleast one candy to children

//         // Tc => O(n)
//         // SC=> O(n)
//         // Approach # 1, sir mik
//         int size=ratings.size();
//         vector<int> count(size,1);

//         // L to R
//         for(int i=0; i< size; i++){
//            if(i-1>=0 && ratings[i] > ratings[i-1])
//              count[i]=max(count[i],count[i-1]+1);
//         }
          
//         // L to R
//         for(int i=size-1; i>=0; i--){
//            if(i+1<size && ratings[i] > ratings[i+1])
//                 count[i]=max(count[i],count[i+1]+1);
//         }


//         // final computation
//         int miniumCandies=0;
//         for(int i=0; i< size;i++){
//              miniumCandies+=count[i];
//         }

        

//         return miniumCandies;
//     }
    // Approach 2 

    // TC O(n) with SC O(1)

    
int candy(vector<int>& ratings) {

    int n=ratings.size();
      int i=1;
      int candy=n;// bcz initially all child has 1 candy
      while(i < n){
        if(ratings[i]==ratings[i-1])
           {i++;
           continue;

           }

         
         int peak=0;

           while(ratings[i]> ratings[i-1]){
              peak++;
              candy+=peak;
              i++;

              if(i==n)
                 return candy;

           }

           int dip=0;
           while(i<n && ratings[i]< ratings[i-1]){
            dip++;
            candy+=dip;
            i++;

            // 
            /*
             yahn pr ya iss lia nhi kia kuin ky hr ik dip ka bd hum na ya lzmi dekhna 
             ha ky peak max ha ya dip uss hisab sa jo minimum ho ga na usko hum na candy mn sa remove kr daina ha.
             bs isi wja sa hum na ya condition nhi dali yahn pr

              if(i==n)
                 return candy;

            */
           }

candy-=min(peak,dip);


      }
      return candy;
    } // SC => O(n) , SC => O(1)

};