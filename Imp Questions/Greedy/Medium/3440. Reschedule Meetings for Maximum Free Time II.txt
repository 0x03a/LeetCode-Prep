class Solution {
public:
    int maxFreeTime(int eventTime, vector<int>& startTime, vector<int>& endTime) {
//         vector<int> freeArr; // store durations of free gap
//    freeArr.push_back(startTime[0]); // before first event
//     //Calculate gaps between events

//         for (int i = 1; i < startTime.size(); i++) {
//             freeArr.push_back( startTime[i] - endTime[i - 1]);
//         }
     
//         freeArr.push_back( eventTime - endTime[startTime.size() - 1]); // after last event

// // Khandani Sliding Window

// int n=freeArr.size();
// // first find smallest event, so that it can be fixed easily
// int smallestEvent=INT_MAX;
// for(int i=0; i< startTime.size();i++){
//     smallestEvent=min(smallestEvent,endTime[i]-startTime[i]);
// } 
// cout<<smallestEvent<<endl;

// int val=INT_MAX;
// int smallestGapIndex=INT_MAX;
// // now fixing at each gap to see 
// for(int i=0;i<n;i++){
//    if(freeArr[i] > 0 && freeArr[i] < val){
//          smallestGapIndex=i;
//          val=freeArr[i];
//    }
    
// }

// if(smallestGapIndex == INT_MAX) // no smallest gap founded
//    return 0;

// cout<<"\n jo: ";
// for(auto & val: freeArr){
//     cout<<val<<" , ";
// }
// cout<<endl;
// cout<<smallestGapIndex<<endl;

// cout<<freeArr[smallestGapIndex]<<endl;

// freeArr[smallestGapIndex]-=smallestEvent;



// cout<<endl;

// int j=0;
// int i=0;

// int currSum=0;
// int maxSum=0;
// bool flag=false;
// int count=0;
// while( j < n){
//     if(j!=smallestGapIndex && j-i+1 == 1)
//    { currSum+=freeArr[j]+1;
//    flag=true;
//    }
//     else
//       currSum+=freeArr[j];

    

//     if(i< n && j-i+1 > 2){ // 2 bcz 1 merge gives 2 free space
//     if(flag==false)
//       currSum-=freeArr[i];
//       else
//       {
//          currSum-=freeArr[i];
//          currSum-=1;
//          flag=false;
//       }
    
//       i++;
//         maxSum=max(maxSum,currSum);
//     j++;
//     }
//     else{
//     maxSum=max(maxSum,currSum);
//     j++;
  
//     }
// }




// return maxSum;

// sir mik Approach , // TC => O(n), SC=> O(n)
//   vector<int> freeArr; // store durations of free gap
//    freeArr.push_back(startTime[0]); // before first event
//     //Calculate gaps between events

//         for (int i = 1; i < startTime.size(); i++) {
//             freeArr.push_back( startTime[i] - endTime[i - 1]);
//         }
     
//         freeArr.push_back( eventTime - endTime[startTime.size() - 1]); // after last event


//         int n=freeArr.size();

//         vector<int> maxRightfree(n,0);
//         vector<int> maxLeftfree(n,0);

//         for(int i=n-2;  i >= 0 ; i--) 
//         {
//             maxRightfree[i]=max(maxRightfree[i+1],freeArr[i+1]);
//         }

//            for(int i=1;  i < n ; i++) 
//         {
//             maxLeftfree[i]=max(maxLeftfree[i-1],freeArr[i-1]);
//         }

//         int result=0;
// // iterating on the free Array
//         for(int i=1; i<n; i++){
//             int currEventtime=endTime[i-1] - startTime[i-1]; // duration of event d

//             // Case1: moving completely out
//             if(currEventtime <= max( maxLeftfree[i-1], maxRightfree[i])){
// result=max(result,freeArr[i-1]+currEventtime+ freeArr[i]);
//             }

            
// // case2: shift left or shift right

//                result=max(result,freeArr[i-1]+freeArr[i]);
//         }

//         return result;

//             }


// optimization using a variable instead of a complete leftArr, homeWork from sir mik done by me.
 // TC => O(n), SC=> O(n)
 vector<int> freeArr; // store durations of free gap
   freeArr.push_back(startTime[0]); // before first event
    //Calculate gaps between events

        for (int i = 1; i < startTime.size(); i++) {
            freeArr.push_back( startTime[i] - endTime[i - 1]);
        }
     
        freeArr.push_back( eventTime - endTime[startTime.size() - 1]); // after last event


        int n=freeArr.size();

        vector<int> maxRightfree(n,0);
        // vector<int> maxLeftfree(n,0);
        int maxLeftFree=0;

        for(int i=n-2;  i >= 0 ; i--) 
        {
            maxRightfree[i]=max(maxRightfree[i+1],freeArr[i+1]);
        }

        //    for(int i=1;  i < n ; i++) 
        // {
        //     maxLeftfree[i]=max(maxLeftfree[i-1],freeArr[i-1]);
        // }

        int result=0;
// iterating on the free Array
        for(int i=1; i<n; i++){
            int currEventtime=endTime[i-1] - startTime[i-1]; // duration of event d
     
        //    maxLeftFree=max(maxLeftFree,freeArr[i-1]);   ya idhr iss lia nhi likha kuin ky hum left ka lia, jb humm array mn bhi krta tha to i-1 ka left side 
        // wala gap find krna hota tha, to let's agr hum freeArr mn i index (i.e 3) pr ha to evvent i=2 pr hota tha or humin event i=2 ka left sice pr sara gaps chia hota tha, to issi waja sa hum maxleftarr[i-1] krta tha ,
        // likn agr mn iss line ko jo comment ki phla likhta hon na to wo i=3 ka leftside wala gaps check krta . bs isi wja sa nicha likha
        // for more clarification see sir mik video 

            // Case1: moving completely out
            if(currEventtime <= max( maxLeftFree, maxRightfree[i])){
result=max(result,freeArr[i-1]+currEventtime+ freeArr[i]);
            }

                    maxLeftFree=max(maxLeftFree,freeArr[i-1]);  // idhr likha kuin ky wo phla i-1 check kra ga phr next next....

            
// case2: shift left or shift right

               result=max(result,freeArr[i-1]+freeArr[i]);
        }

        return result;

            }
    
};