class Solution {
public:
    int maxDiff(int num) {
        

        // i tried but could not do it.
//         int a=0;
//         int b=0;

//         // for a
//         // get x random

//       int x=0;
//       int y=0;
//        int maxDiff=-1;
       

//         string temp=to_string(num);
//         int len=temp.length();
//         x=(temp[0]-'0');
//         y=9;
//         for(int i=0; i< len;i++){
//             if(temp[i]== (x+'0')){
              
//                 temp[i]=(y+'0');

                
//             }
//         }
         
//         for(int i=0;i<len;i++){
//             a=a*10 + (temp[i]-'0');
//         }
        


// // for b
   
       
       

//         temp=to_string(num);
//         len=temp.length();
//         x=(temp[0]-'0');
//         y=x+(temp[0]-'0')-y;

//          for(int i=0; i< len;i++){
//             if(temp[i]== (x+'0')){
              
//                 temp[i]=(y+'0');
//             }
//         }


//    for(int i=0;i<len;i++){
//             b=b*10 + (temp[i]-'0');
//         }
//         cout<<a<<" "<<b<<endl;
//      maxDiff=max(maxDiff,a-b);
//      return maxDiff;


// now after watching sir mik video

//info:
// we have two perform these steps two times separately:
//  1- pick x digit btw 0-9
//  2- pick y digit btw 0-9. (y and x can be equal)
//  3- Replace all the occurrences of x in the decimal representation of num by y.
// this step 3 confirms that x will be any digit from num.
// like for ex if num is 123 then x can be let's say 3.
// and y can be any digit which will be replaced with num.
// if for ex y is 7 then 'a' becomes 127.

// also note:  that neither a nor b may have any leading zeros, and must not be 0.


// we have get 'a' largest and 'b' smallest to get maximum diff

// now let's say num=555
// we converted it into string
// now we traverse it from LtoR
// now if the MSN(most significant number) is not '9', in our case it is '5' so store it
// and then 'y' will be our '9'
// bcz it will maximize our diff
// so in our case 'a' will be become '999'




// now for b we have to find smallest
// now leading entries cannot be 0
// again taverse it from LtoR
// we will first add simply a check if i==0 and it is not 1 then make it 1 and break.


// ( note: if it was already 1 we move to next and if the next was like '2', then we make it
// '0', let's say if num was '111' now if we try to make 2nd 1 at i=1, like x=1, y=0, so when
// we replace our first '1' automatically turns into '0', so to deal it, we  will 
//  write this if(nums[i]!=0 && nums[i]!=nums[0]))


// if MSN is not 1 then store it in x and x=5 and then y will be automatically be '1'
// then after replacing in num where where x is found replace it with y
// 'b' will become 111.


// so max diff will be 999-111 => 888.

 
// code done by me


// int x=0;
// int y=0;
// int a=0;
// int b=0;
// string temp=to_string(num);

// int len=temp.length();

// // first attempt to get largest 'a'

// for(int i=0 ;i < len;i++){
//     if(temp[i]!='9')
//        {
//            x=temp[i]-'0';
//            y=9;
//            break;
//        }
// }



// for(int i=0; i< len;i++){
//     if(temp[i]==(x+'0'))
//     {
//         temp[i]=(y+'0');
//     }
// }

// for(int i=0; i< len;i++){
//     a=a*10+(temp[i]-'0');
// }



// x=0;
// y=0;
// // now for b
// temp=to_string(num);


// for(int i=0 ;i < len;i++){
//     if(i==0)
//        {
//           if(temp[i]!='1'){
//            x=temp[i]-'0';
//            y=1;
//            break;
//          }
//        }
//        else{
//         if(temp[i]!='0' && temp[i]!=temp[0]){
//              x=temp[i]-'0';
//            y=0;
//            break;
//         }
//        }
// }


// for(int i=0; i< len;i++){
//     if(temp[i]==(x+'0'))
//     {
//         temp[i]=(y+'0');
//     }
// }

// for(int i=0; i< len;i++){
//     b=b*10+(temp[i]-'0');
// }







// return a-b;

// code by sir mik

string str1=to_string(num); // a

string str2=str1; //b

int idx=str1.find_first_not_of('9'); // logbase10(num)
if(idx != string::npos){   // done for largest
    char ch=str1[idx];
    replace(begin(str1),end(str1),ch,'9');
}

int len=str2.length();

for(int i=0;i<len;i++){
    char ch=str2[i];

    if(i==0){
        if(ch !='1'){
            replace(begin(str2),end(str2),ch,'1');
            break;
        }
    }
    else if(ch != '0' && ch != str2[0]){
        replace(begin(str2),end(str2),ch,'0');
        break;
    }
}

    return stoi(str1)-stoi(str2);



    }
};


// youtube video link of sir mik: https://youtu.be/bT-xxyXvB3c?si=hY_k1F6ULppoMtCI
