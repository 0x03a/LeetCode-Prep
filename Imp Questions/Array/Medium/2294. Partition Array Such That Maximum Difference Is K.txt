class Solution {
public:
    int partitionArray(vector<int>& nums, int k) {
        /// note:
        /*
            ### 🔹 **Subsequence (in simple words):**

A **subsequence** is a sequence you get by **removing some elements (or none)** from an array **without changing the order** of the remaining elements.

---

### ✅ Example:

Given array:

```
[1, 3, 5, 7]
```

Some valid subsequences:

* `[1, 3, 5, 7]` ✅ (original array itself)
* `[1, 5, 7]` ✅
* `[3, 7]` ✅
* `[1, 7]` ✅
* `[5]` ✅
* `[]` ✅ (empty subsequence is valid)

But **not** `[7, 1]` ❌ (because it changes the original order)

---

### 🔑 Rule:

> You can **skip** elements, but **can’t change the order**.



        */

        // intuition of mine
        // as in this question we have to get min no of subsequcences needed such that
        // the diff btw the max and min value in each subsequence is at most k
        // - so 1st we will sort it
        // - we will get the first element as min elment
        // - and compare it will the i+1, if it is atmost k, then count it is as subseq
        // - if it is less than atmost k then move to the next element to see that if is atmost
        // k then make that whole a subsequence and count it
        // - if it is greater then atmost k, come in else and count that element a single subsequence


        // let's code, it will clear you.

        // code done by me TC=> O(nlogn), SC=> O(1)
        // solved in 1 hour and 30 min.

        int size=nums.size();

        
        // sort
        sort(nums.begin(),nums.end());
     
     int min1=nums[0];

        // for counting subseq
        int count=0;
        for(int i=0; i< size;i++){
        
            if(i+1 < size && nums[i+1]-min1 <= k ){
                while(i< size && i+1 < size && nums[i+1]-min1 <= k ){
                       i++;
                }   
                  count++;
                if(nums[i]-min1 == k)
                {                    
                 if(i+1 < size)
                       min1=nums[i+1];

                }
                else
                   {
                     if(i+1 < size)
                   min1=nums[i+1];
                   }  
            }
            else{
                if(min1 - min1 <=k){
                    count++;
                }
                if(i+1 < size)
                   min1=nums[i+1];
            }
        }

        return count;
    }
};

// 1,2,3,5
// 1,5 correct 
// 2,3 correct
// 1,2,3 wrong


// sorting+greedy+arr

// 1,2,3,5,6, k=2
//         m,i          

// 0,0,0,0,0, k=0
//   m i i i i 

// 1,2,3,5,5, k=3
//   m i i m i 