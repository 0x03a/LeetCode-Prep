class Solution {
public:

// bool isSubseqence(string & s, string & sub, int & k){
//     int i=0; 
//     int j=0;
//     int L=sub.length();
//     int n=s.length();

//     while(i<n && j < k* L){
//            if(s[i]==sub[j%L]){
//             j++;
//            }
//            i++;
//     }

//     return j == k* L; // means sara character mil gai tha.
//     }




// string result="";

// void backtracking(string & s, string & curr, vector<bool> & canUse, vector<int> & requiredFreq, int k, int maxLen){
//     if(curr.length() > maxLen)
//        return ;

//        if((curr.length() > result.length() || (curr.length() == result.length() && curr > result)) && isSubseqence(s,curr,k)){ // here curr > result means if curr is lexographically greater than result.
//        result=curr;

//        }

//        for(int i=0; i<26; i++){
//         if(canUse[i] == false || requiredFreq[i] == 0)
//          continue;
  
// // DO
//         char ch=i+'a';
//         curr.push_back(ch);

//         requiredFreq[i]--;

//         // explore
//         backtracking(s,curr,canUse, requiredFreq, k, maxLen);
//         // Undo
//         curr.pop_back();
//           requiredFreq[i]++;

//        }
// }

//  // TC => O(26 (N/K)âˆ—N), with not improved backtracking
//     string longestSubsequenceRepeatedK(string s, int k) {
//         // sir mik approach

//         int n=s.length();
//         int freq[26]={};

//         for(char & ch: s){
//             freq[ch-'a']++;
//         }

//         vector<bool> canUse(26,false);
//         vector<int> requiredFreq(26,0);

//         for(int i=0; i<26; i++){
//             if(freq[i] >=k){
//                 canUse[i]=true;
//                 requiredFreq[i]=freq[i]/k;
//             }
//         }

//        int maxLen= n/k;
//        string curr;
//        backtracking(s, curr, canUse, requiredFreq, k, maxLen);
//        return result;
//     }


// improved a little mostly code is same.

bool isSubseqence(string & s, string & sub, int & k){
    int i=0; 
    int j=0;
    int L=sub.length();
    int n=s.length();

    while(i<n && j < k* L){
           if(s[i]==sub[j%L]){
            j++;
           }
           i++;
    }

    return j == k* L; // means sara character mil gai tha.
    }




string result="";

bool backtracking(string & s, string & curr, vector<bool> & canUse, vector<int> & requiredFreq, int k, int maxLen){
    if(curr.length() ==  maxLen)
       {
         if(isSubseqence(s,curr,k)){
            result=curr;
            return true; // return blindy true bcz it will be the largest subsequence
         }
         return false;  
       }

     

       for(int i=25; i>=0; i--){
        if(canUse[i] == false || requiredFreq[i] == 0)
         continue;
  
// DO
        char ch=i+'a';
        curr.push_back(ch);

        requiredFreq[i]--;

        // explore
      if(  backtracking(s,curr,canUse, requiredFreq, k, maxLen) == true)
        return true;
      
        // Undo
        curr.pop_back();
          requiredFreq[i]++;

       }
      return false; 
}

 // TC => O(n * (n/k)!),  improved backtracking. backtracking takes (n/k)! time
 // SC => n/k, bcz curr ka max length n/k ho skta hr bari.
    string longestSubsequenceRepeatedK(string s, int k) {
        // sir mik approach

        int n=s.length();
        int freq[26]={};

        for(char & ch: s){
            freq[ch-'a']++;
        }

        vector<bool> canUse(26,false);
        vector<int> requiredFreq(26,0);

        for(int i=0; i<26; i++){
            if(freq[i] >=k){
                canUse[i]=true;
                requiredFreq[i]=freq[i]/k; // atmost a character can be used in a subsequence
            }
        }

       int maxLen= n/k;
       string curr;
      for(int len=maxLen; len>=0; len--){
        vector<int> tempRequiredFreq=requiredFreq;
        if(backtracking(s, curr, canUse, tempRequiredFreq, k, len) == true){
             return result;
        }
      }
       return result;
    }
};
// both are sir mik approaches