class Solution {
public:





// Average   
/*
1 → 3 → 9 → 27 → 81 → ... → up to n
In other words, you're tripling temp until it reaches n.

That’s exponential growth, base 3 — but from the bottom up
TC=> logbase3n
SC=> resursionstack logbase3n
*/
//        bool result(int   n,long temp) {
   
    


//     if (temp  == n) {
//         return true;
//     }
//     else if (temp  < n) {
//         return result(n, 3 * temp);
//     }
  
//     return false;

    


  



// }


     
// // Optimal, TC => O(logn)
// // SC=> O(logn), Recursion stack
// bool result(int   n) {

//    if(n%3==0){
//             if (n== 3 ) {
//                 return true;
//             }
//              else     
//               return result(n / 3);
//    }
  
//     return false;


// }
//    bool isPowerOfThree(int n) {
//        int temp = n;
  
//        if (n >= 3) {
//            return result(temp);
//        }
//        else if(n==1)
//           return true; // bcz 3^ 0=> 1

//        return false;
//    }


// leetcode solution O(1) both TC, SC
  bool isPowerOfThree(int n) {
  return n > 0 && 1162261467%n ==0;

  }
};