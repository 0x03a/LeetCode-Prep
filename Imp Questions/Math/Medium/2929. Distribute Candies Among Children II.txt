class Solution {
public:
    // //  Approach 1 timelimit will be exceeded for it
    //  long long Solve(int countChild, int n, int & limit){// TC will be O(limit * limit * limit) => O(limit^3), which is obvs not a good solution.
    //     if (countChild == 3){ // all children have been assigned
    //         if(n==0) // all candies have been distributed among the 3 children
    //         {
    //             return 1;
    //         }
    //         else
    //           return 0;
    //     }


    //     int  ways=0;

    //     for(int assign=0; assign<= min(n,limit); assign++){ // invalid cases for assign <= limit, bcz of constraints , Ex if n=5, and limit= 100, now  assign <= limit this cond is not valid bcz only 5 candies are avaliable and 1 child cannot be assigned 100 candies , so this cond assign<= min(n,limit) is valid.

    //         ways+=Solve(countChild+1, n-assign, limit);
    //     }
    //     return ways;
    //  }

   
    // long long distributeCandies(int n, int limit) {

    //     int countChild=0;
    //     long long result=Solve(countChild,n,limit);
    //     return result;
    //         }




 // Approach 2 iteratively, O(n^3)
//    long long distributeCandies(int n, int limit) {
//              long long ways=0;

//              for(int ch1=0; ch1 <= min(n,limit); ch1++){
//                 for (int ch2=0; ch2 <= min(n-ch1,limit);ch2++){
//                     for(int ch3=0; ch3<=min(n-ch1-ch2,limit);ch3++){
//                         if(ch1+ch2+ch3==n)
//                              ways++;

//                     }                   

//                 }
//              }

//              return ways;
      
//             }






//  // Approach 3, improvement in approach 2, TC => O(n^2), but still exceeds time limit due to constraint 10^6
//     long long distributeCandies(int n, int limit) {
//              long long ways=0;

//              for(int ch1=0; ch1 <= min(n,limit); ch1++){
//                 for (int ch2=0; ch2 <= min(n-ch1,limit);ch2++){
//                 //  int ch3=n-ch1-ch2;
//                 //  if(ch1+ch2+ch3==n)
//                 //   ways++;

//                 // a little bit correction here 
//                 // these two below are already same:
//                 /* 
//                   //  int ch3=n-ch1-ch2;
//                 //  if(ch1+ch2+ch3==n)
//                 */
//                 // so write this only:
//                    int ch3=n-ch1-ch2;

//                    // write this if instead of the previous if

//                    if(ch3<=limit)
//                       ways++;

//                 }
//              }

//              return ways;
      
//             }

  long long distributeCandies(int n, int limit) {  // TC -> O(n)
  long long ways=0;
    
    int minch1=max(0,n-2*limit);
    int maxch1=min(n,limit);

    for(int x=minch1; x<=maxch1;x++){ // fixing child1 assignment of candies

       int N=n-x; // for child 2 and child3
        int minch2=max(0,N-limit);
        int maxch2=min(N,limit);

        ways+=(maxch2-minch2+1);
    }

    return ways;

  }

};