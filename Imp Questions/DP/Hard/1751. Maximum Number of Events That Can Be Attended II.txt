class Solution {
public:

// all appraoches sir mik

// int n;
// int solve(vector<vector<int>>& events,int idx, int k){ // TLE bcz memorization nhi ki
//     if(idx >= n || k == 0){
//         return 0;
//     }

//     int start=events[idx][0];
//     int end=events[idx][1];
//     int value=events[idx][2];


//     int skip=solve(events,idx+1,k); // skip

//     // take
//     int j=idx+1;
//     for(;j<n;j++){
//         if(events[j][0] > events[idx][1])
//               break;
//     }

//     int take=value+ solve(events,j,k-1);
// return max(skip, take);

// }
//     int maxValue(vector<vector<int>>& events, int k) {
//         sort(begin(events),end(events));
//         n=events.size();

//         return solve(events,0,k);
//     }


// int n; // TC O(n+1) (k+1) (n)
// vector<vector<int>> t;
// int solve(vector<vector<int>>& events,int idx, int k){ //  memorization ka sth acceptec
//     if(idx >= n || k == 0){
//         return 0;
//     }


//         if(t[idx][k]!=-1)
//             return t[idx][k];


//     int start=events[idx][0];
//     int end=events[idx][1];
//     int value=events[idx][2];


//     int skip=solve(events,idx+1,k); // skip

//     // take
//     int j=idx+1;
//     for(;j<n;j++){
//         if(events[j][0] > events[idx][1])
//               break;
//     }

//     int take=value+  solve(events,j,k-1);
//  return t[idx][k]=max(skip, take);

// }







//     int maxValue(vector<vector<int>>& events, int k) {
//         sort(begin(events),end(events));
//         n=events.size();
// t.resize(n+1, vector<int>(k+1,-1));
//         return solve(events,0,k);
//     }

//now with binary search in replace of linear search, // TC O(n+1) (k+1) (logn), but TLE don't know why, may be some network issue, bcz sir mik ka to ho gia tha
// int n;
// vector<vector<int>> t;
// int solve(vector<vector<int>>& events,int idx, int k){ //  memorization ka sth acceptec
//     if(idx >= n || k == 0){
//         return 0;
//     }


//         if(t[idx][k]!=-1)
//             return t[idx][k];


//     int start=events[idx][0];
//     int end=events[idx][1];
//     int value=events[idx][2];


//     int skip=solve(events,idx+1,k); // skip

//     // take
//     vector<int> temp{end,INT_MAX,INT_MAX};
//     int j=upper_bound(events.begin()+idx+1,events.end(),temp) - events.begin();
  

//     int take=value+ solve(events,j,k-1);
// return t[idx][k]=max(skip, take);

// }
//     int maxValue(vector<vector<int>>& events, int k) {
//         sort(begin(events),end(events));
//         n=events.size();
//  t.resize(n+1, vector<int>(k+1,-1));
//         return solve(events,0,k);
//     }


};