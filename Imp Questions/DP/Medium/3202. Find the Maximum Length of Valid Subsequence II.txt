class Solution {
public
   
 jb bhi iss trah ka equation wala swal to sb sa phla eq ko recognize krin.
    
    
 TC = O(n^2), SC= O(kn);
 now bottom up approach, still TLE
 int maximumLength(vectorint& nums,int k) {
  int n=nums.size();
  

  mod 1
 vectorint dp1(n,1);
  mod 0
 vectorint dp0(n,1);

 2 vector lia, ik lia dp0{}, or ik lia dp1[]
 take a 2D vector instead of it 
  {
    {} 0th row for mod 0
    {} 1th row for mod 1
 }


 ab idhr 2 ki gaga k, aa gai ga kuin ky pichla wala swal mn
 %2, jis ka reminder ya to 0, ya to 1 tha
  pr idhr % k , rem is 0,1,2,3 ... k-1
 vectorvectorintdp(2,vectorint(n,1));  2 rows, n col  , for 3201. Find the Maximum Length of Valid Subsequence I

vectorvectorintdp(k,vectorint(n,1));

int maxSub=1;

for(int i=1; i n; i++){
    for(int j=0; j i; j++){
        int mod=(nums[j]+nums[i])%k;

         mod = 0, 0th row, %2 wala case ka result
         mod = 1, 1th row, %2 wala case ka result
        
        dp[mod][i]=max(dp[mod][i], 1+ dp[mod][j]);
        maxSub=max(maxSub,dp[mod][i]);

         if(mod == 1){
          dp[i]=max(dp1[i],1+dp1[j]);
          maxSub=max(maxSub, dp1[i]);
         }
         else  mode == 0 ka lia yahn likh do
         {
       
          dp[i]=max(dp0[i],1+dp0[j]);
            maxSub=max(maxSub, dp0[i]);
         }
    }
}

  mod 0 
 vectorint dp0(n,1);

 for(int i=1; i n; i++){
     for(int j=0; j i; j++){
         int mod=(nums[j]+nums[i])%2;
         if(mod == 0){
          dp0[i]=max(dp0[i],1+dp0[j]);
            maxSub=max(maxSub, dp0[i]);
         }
     }
 }
return   maxSub;
 }

};