class Solution {
public:
/*
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) { // Brute Force done
       int size1=nums1.size();
       int size2=nums2.size();

       for(int i=0;i<size1;i++)
       {
        for(int j=0;j<size2;j++)
        {
            if(nums1[i]==nums2[j]){
            
                while(j+1 < size2 &&  nums1[i] > nums2[j+1] )
                  {
                   j++;
                  }


                      if( j+1 < size2 && nums2[j+1] > nums2[j])
                {
                    nums1[i]=nums2[j+1];
                    break;
                   
                }
                else{
  nums1[i]=-1;
                    break;
                   
                }
             
            }
        }
       }
       return nums1;


    }
*/
vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) { // done both by me horahhhhh
    int size1 = nums1.size();
    int size2 = nums2.size();

    unordered_map<int, int> mapNums1;

    int i = 0;
    while (i < size1) {
        mapNums1[nums1[i]] = i;
        i++;
    }

    i = 0;
    stack<int> s;
    while (i < size2) { 

        if (s.empty())
        {
            s.push(nums2[i]);
        }
        else {
            if (nums2[i] < s.top()) {
                s.push(nums2[i]);
            }
            else {
                while (!s.empty() && s.top() < nums2[i]) {
                    if (mapNums1.count(s.top())) {
                        nums1[mapNums1[s.top()]] = nums2[i];
                      
                    }
                    s.pop();
                }
                s.push(nums2[i]);
            }

        }
        i++;
    }

    while (!s.empty()) {
        if (mapNums1.count(s.top())) {
            nums1[mapNums1[s.top()]] = -1;
        }
        s.pop();
    }

    return nums1;

    // Time complexity is O(size1+size2)
    // Space complexity is O(n)

}
};