class Solution {
public:

// sir mik appraoches

// // TC O(2^n), 
//    int countSubsets(int idx, int currOr, vector<int> & nums, int &maxOr){
//     if(idx == nums.size())
//     {
//         if(currOr== maxOr)
//           return 1;
//         else
//            return 0;
//     }

// // Take nums[idx]
//     int takecount=countSubsets(idx+1,currOr | nums[idx], nums, maxOr);

//     // not taken nums[idx]

//     int notTaken= countSubsets(idx+1, currOr, nums,maxOr);

//     return takecount+ notTaken;

//    }
//     int countMaxOrSubsets(vector<int>& nums) {
//         int maxOr=0;
//         for(int num: nums){
//             maxOr|=num;
//         }

//         int currOr=0;
//         return countSubsets(0,currOr,nums,maxOr);
//     }


// with memorization
// TC => O(n * maxOr)
// SC => O(n * maxOR)
   int countSubsets(int idx, int currOr, vector<int> & nums, int &maxOr, vector<vector<int>> &t){
    if(idx == nums.size())
    {
        if(currOr== maxOr)
          return 1;
        else
           return 0;
    }


    if(t[idx][currOr] != -1)
       return t[idx][currOr];


// Take nums[idx]
    int takecount=countSubsets(idx+1,currOr | nums[idx], nums, maxOr, t );

    // not taken nums[idx]

    int notTaken= countSubsets(idx+1, currOr, nums,maxOr,t);

    return t[idx][currOr]=takecount+ notTaken;

   }
    int countMaxOrSubsets(vector<int>& nums) {
        int maxOr=0;
        for(int num: nums){
            maxOr|=num;
        }

        int n=nums.size();
        vector<vector<int>> t(n+1, vector<int> (maxOr+1,-1));
        int currOr=0;
        return countSubsets(0,currOr,nums,maxOr,t);
    }
};