class Solution {
public
 My approach.
    vectorint findKDistantIndices(vectorint& nums, int key, int k) {  TC= O(N), SC= O(1)
         two pointers
 let's understand the question
 - A k-distant index is an index i of nums for which there exists at least one index j such that i - j = k and nums[j] == key.
 Ex nums= [3,4,9,1,3,9,5]

 i=0, j=0, keyFind=-1
3,4,9,1,3,9,5
i
j


- j++,until key is found, keyFind=j;
3,4,9,1,3,9,5
i   j

0-2  k , false
3,4,9,1,3,9,5
i   j

1-2 = k, True, vec[1]
3,4,9,1,3,9,5
  i j

2-2 =k, true, vec[1,2]
3,4,9,1,3,9,5
    j
    i

3-2 =k, true, vec[1,2,3]
3,4,9,1,3,9,5
    j i
      

4-2   k, false,ikeyFind, keyFind=-1, vec[1,2,3]
3,4,9,1,3,9,5
    j   i


- j++,until key is found, keyFind=j;
3,4,9,1,3,9,5
        i j

4-5 = k, True, vec[1,2,3,4]
3,4,9,1,3,9,5
        i j

5-5 = k, True, vec[1,2,3,4,5]
3,4,9,1,3,9,5
          j
          i

6-5 = k, True, vec[1,2,3,4,5,6]
3,4,9,1,3,9,5
          j i
           

 






        int i=0;
        int j=0;
        int size=nums.size();
        int keyFinded=-1;
        vectorint res;
        while(isize){

            while(jsize && nums[j]!=key)
                j++;

            if(j  size && nums[j]==key)
              keyFinded=j;

            if(keyFinded!=-1 && abs(i-keyFinded) = k && nums[keyFinded]==key){
                 res.push_back(i);
            } 
            else if( keyFinded!=-1 && abs(i-keyFinded)  k && i  keyFinded && nums[keyFinded]==key)
             {
                i--;
                keyFinded=-1;
                j++;
             }
                   
i++;


        }

        return res;
    }
};