class Solution {
public:
int pivot(vector<int> & nums){
    int st=0, end=nums.size()-1;

    while( st < end){
        int mid=st+(end-st)/2;

        if(nums[mid] > nums[end]){ // like if 7 > 0, in the first example given.
           st=mid+1;
        }
        else{
            end=mid;
        }
    }

    return end;
}
int binary_Search(int st, int end, vector<int> &nums,int target){
    int valueFoundedatIndex=-1;

    cout<<st<<end<<endl;
      while(st<=end){
         int   mid=(st+((end-st)/2));
     
         
           if(target > nums[mid])
            { 
                st=mid+1;
                
            }
           else if(target < nums[mid])
             { 
                end=mid-1;
            
             }
           else
              { valueFoundedatIndex=mid;
               
              break;
              }

       

        }
          return valueFoundedatIndex ;


}

// Google, Amazon, Microsoft, Samsung etc
    int search(vector<int>& nums, int target) {
        // we will use here binary search algorihtm which gives us O(logn) timeComplexity.
     
      
        // note:
         // sir mik approach
        // as it is roatated sorted array 
        // we can simply partitioned the array 
        // and search in both partition

        // like ex nums is 4 5 6 7 0 1 2
        // we will first find the pivot index
        // this pivot index will tell where the minimum element start from

        // like as given:
        // - find the pivot

        // PIVOT FINDING:

        // - divide the array
        // - in this case mid index will be 3
        // - After that check if arr[mid] > arr[end]
        // - if it is greater simply do st=mid+1, bcz it's not the minimum element
        // - now st is at index 4, and end is still 6
        // - now when i again get mid it will be 5
        // - now check if arr[mid] > arr[end], in this case it is false
        // - else do r=mid, here i have done r= mid bcz if i done r=mid-1, then the mid wll be lost so we do r=mid, 0 to r (4 5 6 7) and r to size-1 will be (0 1 2) 
        // - remember loop condition will be st < end , bcz if it is st <= end, then the r=mid will always be runnning and result in infinite loop.

        // Simply after finding pivot do this:
        // idx=binary_Search(0, pivot_Index-1,nums,target );
       //  if(idx!=-1)
       //  return idx;
       //  idx=binary_Search(pivot_Index,size-1,nums,target );

       int pivot_Index=0;
        pivot_Index=pivot(nums);
        int size=nums.size();
        int idx=0;
        idx=binary_Search(0, pivot_Index-1,nums,target );
        if(idx!=-1)
          return idx;
        idx=binary_Search(pivot_Index,size-1,nums,target );
      
        
        return idx;
    }
};