class Trie {
public:



   struct trieNode{
    bool isEndofWord=false;
    trieNode * children[26];

   };

    trieNode * getNode(){
        trieNode * newNode= new trieNode;
        newNode -> isEndofWord=false;

        for(int  i=0; i< 26; i++){
            newNode -> children[i]=NULL;
        }

        return newNode;

    }
  trieNode * root;
    Trie() {
        root=getNode();
    }
    

    // O(word.length)
    void insert(string word) {
        trieNode * crawler= root;
        
        for(auto ch : word){
            int idx= (ch-'a');
             if(crawler->children[idx] == NULL)
             {
                crawler->children[idx]=getNode();
             }
             
             crawler=crawler->children[idx];
        }

        crawler -> isEndofWord=true;
    }
    
      // O(word.length)
    bool search(string word) {
          trieNode * crawler= root;
        
        for(auto ch : word){
            int idx=ch-'a';
             if(crawler->children[idx]== NULL)
             {
               return false;
             }
             
             crawler=crawler->children[idx];
        }

       if(crawler != NULL && crawler->isEndofWord== true)
          return true;

     return false;
    }
    
      // O(prefix.length)
    bool startsWith(string prefix) {
           trieNode * crawler= root;
        
        for(auto ch : prefix){
            int idx=ch-'a';
             if(crawler->children[idx]== NULL)
             {
               return false;
             }
             
             crawler=crawler->children[idx];
        }

     return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */