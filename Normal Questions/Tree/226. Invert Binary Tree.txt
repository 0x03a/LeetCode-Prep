/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution { 
public:
/*
 // Techdose Approach 
    void postOrder(TreeNode* root) {
    if (root == NULL)
        return;

    postOrder(root->left);
    postOrder(root->right);

  // also swapping here
    TreeNode* t = root->left;
    root->left = root->right;
    root->right = t;

}



TreeNode* invertTree(TreeNode* root) {
    
   


    if (root == NULL)
        return root;

    postOrder(root);
    return root;
}
*/
/*
TreeNode* invertTree(TreeNode* root) { // done by me using BFS O(n)
// BFS
 queue<TreeNode*>q;
 if(root==NULL)
   return root;
q.push(root);
   while(!q.empty()){
    TreeNode * curr=q.front();
    q.pop();

    // swaping nodes
     TreeNode * t=curr->left;
    curr->left=curr->right;
    curr->right=t;


     if(curr->left)
    q.push(curr->left);
      if(curr->right)
    q.push(curr->right);

    
   }

   return root;


}
*/

// DFS 

TreeNode* invertTree(TreeNode* root) { // done by me using DFS O(n)
// BFS
 stack<TreeNode*>s;
 if(root==NULL)
   return root;
s.push(root);
   while(!s.empty()){
    TreeNode * curr=s.top();
    s.pop();

    // swaping nodes
     TreeNode * t=curr->left;
    curr->left=curr->right;
    curr->right=t;


     if(curr->left)
    s.push(curr->left);
      if(curr->right)
    s.push(curr->right);

    
   }

   return root;


}

};